{"version":3,"sources":["node-sqliter.ts","node-sqliter.js"],"names":[],"mappings":";AACA;;;;;;;;;ACCA;;IDCY,O;;;;;;AAEZ,IAAc,+BAAd;AAAA,CAAA,UAAc,IAAd,EAAmB;AACF,SAAA,IAAA,GAAO,MAAP;AACA,SAAA,IAAA,GAAO,MAAP;AACA,SAAA,OAAA,GAAU,SAAV;AACA,SAAA,IAAA,GAAO,MAAP;AACA,SAAA,IAAA,GAAO,MAAP;AAChB,CAND,EAAc,iBAAA,IAAA,GAAA,OAAI,EAAJ,CAAd;;;;;IAmBA,O;AAGI,qBAAY,QAAZ,EAAoB;AAAA;;AAChB,aAAK,GAAL,GAAW,IAAI,QAAQ,QAAZ,CAAqB,QAArB,CAAX;AACH;;;;oCAEY,S,EAAmB,M,EAAiB,Q,EAAmB;AAChE,gBAAM,SAAS,OAAO,GAAP,CAAW,iBAAK;AAC3B,uBAAO,CACH,MAAM,KADH,EAEH,MAAM,IAFH,EAGH,MAAM,OAHH,EAIL,IAJK,CAIA,GAJA,CAAP;AAKH,aANc,CAAf;AAQA,gBAAM,wCAAsC,SAAtC,WAAqD,MAArD,OAAN;AAEA,iBAAK,GAAL,CAAS,GAAT,CAAa,KAAb,EAAoB,QAApB;AACH;;;6BAEK,S,EAAmB,M,EAAa,Q,EAAmB;AACrD,gBAAM,OAAO,OAAO,IAAP,CAAY,MAAZ,EAAoB,IAApB,CAAyB,GAAzB,CAAb;AACA,gBAAM,SAAU,UAAC,IAAD,EAAK;AACjB,uBAAO,KAAK,GAAL,CAAS,UAAC,GAAD,EAAI;AAAO,2BAAO,OAAO,GAAP,CAAP;AAAqB,iBAAzC,CAAP;AACH,aAFc,CAEZ,IAFY,EAEN,IAFM,CAED,GAFC,CAAf;AAIA,gBAAM,yBAAuB,SAAvB,WAAsC,IAAtC,oBAAyD,MAAzD,OAAN;AAEA,iBAAK,GAAL,CAAS,GAAT,CAAa,KAAb,EAAoB,QAApB;AACH;;;6BAEK,S,EAAmB,M,EAAa,Q,EAAmB;AACrD,gBAAM,2BAAyB,SAAzB,eAA4C,OAAO,IAAP,CAAY,GAAZ,CAAlD;AAEA,iBAAK,GAAL,CAAS,GAAT,CAAa,KAAb,EAAoB,QAApB;AACH;;;;;;;;;;;;AAQL,QAAQ,OAAR,GAAkB,UAAC,QAAD,EAAiB;AAC/B,WAAO,IAAI,OAAJ,CAAY,QAAZ,CAAP;AACH,CAFD","file":"node-sqliter.js","sourcesContent":["/// <reference path=\"../typings/index.d.ts\" />\n\"use strict\"\n\nimport * as sqlite3 from \"sqlite3\";\n\nexport module TYPE {\n    export const NONE = 'NONE';\n    export const TEXT = 'TEXT';\n    export const INTEGER = 'INTEGER';\n    export const REAL = 'REAL';\n    export const BLOB = 'BLOB';\n}\n\nexport interface Model {\n    field: string,\n    type: string,\n    options?: string\n}\n\n\n\n/**\n * Sqliter\n */\nclass Sqliter {\n    private _db: sqlite3.Database;\n\n    constructor(filename) {\n        this._db = new sqlite3.Database(filename);\n    }\n\n    createTable (tableName: string, models: Model[], callback?: Function) {\n        const params = models.map(model => {\n            return [\n                model.field,\n                model.type,\n                model.options\n            ].join(' ');\n        });\n\n        const query = `CREATE TABLE IF NOT EXISTS ${tableName} ( ${params} )`;\n\n        this._db.run(query, callback);\n    }\n\n    save (tableName: string, models: any, callback?: Function) {\n        const keys = Object.keys(models).join(',');\n        const values = ((keys) => {\n            return keys.map((key) => { return models[key]; });\n        })(keys).join(',');\n\n        const query = `INSERT INTO ${tableName} ( ${keys} ) VALUES ( ${values} )`;\n\n        this._db.run(query, callback);\n    }\n\n    find (tableName: string, wheres: any, callback?: Function) {\n        const query = `SELECT * FROM ${tableName} WHERE ${wheres.join(',')}`;\n\n        this._db.run(query, callback);\n    }\n}\n\n/**\n * DB接続\n * @var {string} filename: DBファイルの名前\n * @return {Sqliter}\n */\nexports.connect = (filename: string): Sqliter => {\n    return new Sqliter(filename);\n};\n","/// <reference path=\"../typings/index.d.ts\" />\n\"use strict\";\nimport * as sqlite3 from \"sqlite3\";\nexport var TYPE;\n(function (TYPE) {\n    TYPE.NONE = 'NONE';\n    TYPE.TEXT = 'TEXT';\n    TYPE.INTEGER = 'INTEGER';\n    TYPE.REAL = 'REAL';\n    TYPE.BLOB = 'BLOB';\n})(TYPE || (TYPE = {}));\n/**\n * Sqliter\n */\nclass Sqliter {\n    constructor(filename) {\n        this._db = new sqlite3.Database(filename);\n    }\n    createTable(tableName, models, callback) {\n        const params = models.map(model => {\n            return [\n                model.field,\n                model.type,\n                model.options\n            ].join(' ');\n        });\n        const query = `CREATE TABLE IF NOT EXISTS ${tableName} ( ${params} )`;\n        this._db.run(query, callback);\n    }\n    save(tableName, models, callback) {\n        const keys = Object.keys(models).join(',');\n        const values = ((keys) => {\n            return keys.map((key) => { return models[key]; });\n        })(keys).join(',');\n        const query = `INSERT INTO ${tableName} ( ${keys} ) VALUES ( ${values} )`;\n        this._db.run(query, callback);\n    }\n    find(tableName, wheres, callback) {\n        const query = `SELECT * FROM ${tableName} WHERE ${wheres.join(',')}`;\n        this._db.run(query, callback);\n    }\n}\n/**\n * DB接続\n * @var {string} filename: DBファイルの名前\n * @return {Sqliter}\n */\nexports.connect = (filename) => {\n    return new Sqliter(filename);\n};\n"],"sourceRoot":"/source/"}